%%%
%%% Unit tests for ja_erl_utils_term.
%%%
-module(ja_erl_utils_term_tests).
-include_lib("eunit/include/eunit.hrl").


format_test_() ->
    Fun1 = fun ja_erl_utils_term:format/1,
    Fun2 = fun ja_erl_utils_term:format/2,
    FunInline = fun() -> ok end,
    {module, FunInlineModule} = erlang:fun_info(FunInline, module),
    {index,  FunInlineIndex } = erlang:fun_info(FunInline, index ),
    {uniq,   FunInlineUniq  } = erlang:fun_info(FunInline, uniq  ),
    FunInlineModuleBin = erlang:atom_to_binary(FunInlineModule),
    FunInlineIndexBin  = erlang:integer_to_binary(FunInlineIndex),
    FunInlineUniqBin   = erlang:integer_to_binary(FunInlineUniq),
    FunInlineId = <<FunInlineModuleBin/binary, ".", FunInlineIndexBin/binary, ".", FunInlineUniqBin/binary>>,
    [
        ?_assertEqual(<<"atom">>,                           Fun1(atom                               )),
        ?_assertEqual(<<"12345">>,                          Fun1(12345                              )),
        ?_assertEqual(<<"\"Test string ąČįŪž\""/utf8>>,     Fun1("Test string ąČįŪž"                )),
        ?_assertEqual(<<"<<\"Test binary\">>">>,            Fun1(<<"Test binary">>                  )),
        ?_assertEqual(<<"<<\"Test binary ąČįŪž\">>"/utf8>>, Fun1(<<"Test binary ąČįŪž"/utf8>>       )),
        ?_assertEqual(<<"<<84, 101, 115, 116, 32, 20>>">>,  Fun1(<<"Test ", 20>>                    )),
        ?_assertEqual(<<"<<84, 101, 115, 116, 32, 9:5>>">>, Fun1(<<"Test ", 9:5>>                   )),
        ?_assertEqual(<<"<0.1548.1>">>,                     Fun1(erlang:list_to_pid("<0.1548.1>")   )),
        ?_assertEqual(<<"#Ref<0.1.2.3>">>,                  Fun1(erlang:list_to_ref("#Ref<0.1.2.3>"))),
        ?_assertEqual(<<"#Port<0.1>">>,                     Fun1(erlang:list_to_port("#Port<0.1>")  )),
        ?_assertEqual(<<"#Fun<", FunInlineId/binary, ">">>, Fun1(FunInline                          )),
        ?_assertEqual(<<"fun ja_erl_utils_term:format/1">>, Fun1(Fun1                               )),

        ?_assertEqual(<<"[]">>,                           Fun1([])),
        ?_assertEqual(<<"[single]">>,                     Fun1([single])),
        ?_assertEqual(<<"[\n  several,\n  elements\n]">>, Fun1([several, elements])),

        ?_assertEqual(<<"{}">>,                           Fun1({})),
        ?_assertEqual(<<"{single}">>,                     Fun1({single})),
        ?_assertEqual(<<"{\n  several,\n  elements\n}">>, Fun1({several, elements})),

        ?_assertEqual(<<"#{}">>,                                         Fun1(#{})),
        ?_assertEqual(<<"#{single => pair}">>,                           Fun1(#{single => pair})),
        ?_assertEqual(<<"#{\n  key => value,\n  multiple => pairs\n}">>, Fun1(#{multiple => pairs, key => value})),

        ?_assertEqual(<<"[[]]">>,                   Fun1([[]])),
        ?_assertEqual(<<"[{}]">>,                   Fun1([{}])),
        ?_assertEqual(<<"[#{}]">>,                  Fun1([#{}])),
        ?_assertEqual(<<"[[alus]]">>,               Fun1([[alus]])),
        ?_assertEqual(<<"[[\n  alus,\n  123\n]]">>, Fun1([[alus, 123]])),

        ?_assertEqual(<<"{[]}">>,                        Fun1({[]})),
        ?_assertEqual(<<"{{}}">>,                        Fun1({{}})),
        ?_assertEqual(<<"{#{}}">>,                       Fun1({#{}})),
        ?_assertEqual(<<"{{2.3}}">>,                     Fun1({{2.3}})),
        ?_assertEqual(<<"{{\n  2.3,\n  \"labas\"\n}}">>, Fun1({{2.3, "labas"}})),

        ?_assertEqual(<<"#{[] => []}">>,                             Fun1(#{[] => []})),
        ?_assertEqual(<<"#{{} => {}}">>,                             Fun1(#{{} => {}})),
        ?_assertEqual(<<"#{#{} => #{}}">>,                           Fun1(#{#{} => #{}})),
        ?_assertEqual(<<"#{#{2 => \"3\"} => #{<<\"4\">> => 5.0}}">>, Fun1(#{#{2 => "3"} => #{<<"4">> => 5.0}})),

        ?_assertEqual(<<
            "{\n",
            "  a,\n",
            "  b,\n",
            "  {{{d}}},\n",
            "  c\n",
            "}">>, Fun1({a,b,{{{d}}},c})),
        ?_assertEqual(<<
            "{\n",
            "  a,\n",
            "  b,\n",
            "  {{{\n",
            "    d,\n",
            "    e,\n",
            "    f\n",
            "  }}},\n",
            "  c\n",
            "}">>, Fun1({a,b,{{{d,e,f}}},c})),
        ?_assertEqual(<<
            "[\n",
            "  a,\n",
            "  b,\n",
            "  [[[d]]],\n",
            "  c\n",
            "]">>, Fun1([a,b,[[[d]]],c])),
        ?_assertEqual(<<
            "[\n",
            "  a,\n",
            "  b,\n",
            "  [[[\n",
            "    d,\n",
            "    e,\n",
            "    f\n",
            "  ]]],\n",
            "  c\n",
            "]">>, Fun1([a,b,[[[d,e,f]]],c])),
        ?_assertEqual(<<
            "#{\n",
            "  a => b,\n",
            "  c => d,\n",
            "  e => #{f => #{g => #{h => i}}},\n",
            "  j => k\n",
            "}">>, Fun1(#{a => b, c => d, e => #{f => #{g => #{h => i}}}, j => k})),
        ?_assertEqual(<<
            "#{\n",
            "  a => b,\n",
            "  c => d,\n",
            "  e => #{f => #{g => #{\n",
            "    h => i,\n",
            "    j => k,\n",
            "    l => m\n",
            "  }}},\n",
            "  n => o\n",
            "}">>, Fun1(#{a => b, c => d, e => #{f => #{g => #{h => i, j => k, l => m}}}, n => o})),
        ?_assertEqual(<<
            "[\n",
            "  321,\n",
            "  \"alus\",\n",
            "  [\n",
            "    alus,\n",
            "    456,\n",
            "    1.2,\n",
            "    \"sula\",\n",
            "    <<\"alus\">>,\n",
            "    {\n",
            "      555,\n",
            "      \"geras\"\n",
            "    }\n",
            "  ],\n",
            "  #{\n",
            "    a_pirmas => antras,\n",
            "    b_trecias => 123,\n",
            "    c_ketvirtas => [\n",
            "      a,\n",
            "      b,\n",
            "      c\n",
            "    ],\n",
            "    d_penktas => {\n",
            "      d,\n",
            "      e\n",
            "    }\n",
            "  },\n",
            "  2.3,\n",
            "  <<\"sula\">>,\n",
            "  sula\n",
            "]">>, Fun1([321, "alus", [alus, 456, 1.2, "sula", <<"alus">>, {555, "geras"}], #{a_pirmas => antras, b_trecias => 123, c_ketvirtas => [a,b,c], d_penktas => {d,e}}, 2.3, <<"sula">>, sula])),

        ?_assertEqual(<<"[\n a,\n [\n  b,\n  c\n ],\n d\n]">>,                 Fun2([a, [b, c], d], #{single_indent_length => 1})),
        ?_assertEqual(<<"[\n  a,\n  [\n    b,\n    c\n  ],\n  d\n]">>,         Fun2([a, [b, c], d], #{single_indent_length => 2})),
        ?_assertEqual(<<"[\n   a,\n   [\n      b,\n      c\n   ],\n   d\n]">>, Fun2([a, [b, c], d], #{single_indent_length => 3})),

        ?_assertEqual(<<"[[a, b], [c, d], [e, f], [g, h], [i, j]]">>, Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => true})),
        ?_assertEqual(<<"[\n",
            "  [\n    a,\n    b\n  ],\n",
            "  [\n    c,\n    d\n  ],\n",
            "  [\n    e,\n    f\n  ],\n",
            "  [\n    g,\n    h\n  ],\n",
            "  [\n    i,\n    j\n  ]\n]">>, Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => []})),
        ?_assertEqual(<<"[\n",
            "  [a, b],\n",
            "  [\n    c,\n    d\n  ],\n",
            "  [\n    e,\n    f\n  ],\n",
            "  [\n    g,\n    h\n  ],\n",
            "  [\n    i,\n    j\n  ]\n]">>, Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => [[1]]})),
        ?_assertEqual(<<"[\n",
            "  [a, b],\n",
            "  [\n    c,\n    d\n  ],\n",
            "  [\n    e,\n    f\n  ],\n",
            "  [\n    g,\n    h\n  ],\n",
            "  [\n    i,\n    j\n  ]\n]">>, Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => [[[1]]]})),
        ?_assertEqual(<<"[\n",
            "  [\n    a,\n    b\n  ],\n",
            "  [\n    c,\n    d\n  ],\n",
            "  [e, f],\n",
            "  [\n    g,\n    h\n  ],\n",
            "  [\n    i,\n    j\n  ]\n]">>, Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => [[3]]})),
        ?_assertEqual(<<"[\n",
            "  [\n    a,\n    b\n  ],\n",
            "  [c, d],\n",
            "  [e, f],\n",
            "  [g, h],\n",
            "  [\n    i,\n    j\n  ]\n]">>, Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => [[{2,4}]]})),
        ?_assertEqual(<<"[\n",
            "  [\n    a,\n    b\n  ],\n",
            "  [c, d],\n",
            "  [e, f],\n",
            "  [g, h],\n",
            "  [\n    i,\n    j\n  ]\n]">>, Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => [[[{2,4}]]]})),
        ?_assertEqual(<<"[\n",
            "  [a, b],\n",
            "  [c, d],\n",
            "  [e, f],\n",
            "  [g, h],\n",
            "  [i, j]\n]">>,                Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => [['*']]})),
        ?_assertEqual(<<"[\n",
            "  [a, b],\n",
            "  [c, d],\n",
            "  [e, f],\n",
            "  [g, h],\n",
            "  [i, j]\n]">>,                Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => [[['*']]]})),
        ?_assertEqual(<<"[\n",
            "  [\n    a,\n    b\n  ],\n",
            "  [c, d],\n",
            "  [\n    e,\n    f\n  ],\n",
            "  [g, h],\n",
            "  [\n    i,\n    j\n  ]\n]">>, Fun2([[a,b],[c,d],[e,f],[g,h],[i,j]], #{no_expansion => [[[2, 4]]]})),

        ?_assertEqual(<<"#{\n",
            "  a => {\n    b,\n    c\n  },\n",
            "  d => {\n    e,\n    f\n  },\n",
            "  g => {\n    h,\n    i\n  },\n",
            "  j => {\n    k,\n    l\n  },\n",
            "  m => {\n    n,\n    o\n  }\n}">>, Fun2(#{a => {b,c}, d => {e,f}, g => {h,i}, j => {k,l}, m => {n,o}}, #{no_expansion => []})),
        ?_assertEqual(<<"#{\n",
            "  a => {b, c},\n",
            "  d => {\n    e,\n    f\n  },\n",
            "  g => {\n    h,\n    i\n  },\n",
            "  j => {\n    k,\n    l\n  },\n",
            "  m => {\n    n,\n    o\n  }\n}">>, Fun2(#{a => {b,c}, d => {e,f}, g => {h,i}, j => {k,l}, m => {n,o}}, #{no_expansion => [[a]]})),
        ?_assertEqual(<<"#{\n",
            "  a => {b, c},\n",
            "  d => {\n    e,\n    f\n  },\n",
            "  g => {\n    h,\n    i\n  },\n",
            "  j => {\n    k,\n    l\n  },\n",
            "  m => {\n    n,\n    o\n  }\n}">>, Fun2(#{a => {b,c}, d => {e,f}, g => {h,i}, j => {k,l}, m => {n,o}}, #{no_expansion => [[[a]]]})),
        ?_assertEqual(<<"#{\n",
            "  a => {\n    b,\n    c\n  },\n",
            "  d => {\n    e,\n    f\n  },\n",
            "  g => {h, i},\n",
            "  j => {\n    k,\n    l\n  },\n",
            "  m => {\n    n,\n    o\n  }\n}">>, Fun2(#{a => {b,c}, d => {e,f}, g => {h,i}, j => {k,l}, m => {n,o}}, #{no_expansion => [[g]]})),
        ?_assertEqual(<<"#{\n",
            "  a => {\n    b,\n    c\n  },\n",
            "  d => {e, f},\n",
            "  g => {h, i},\n",
            "  j => {k, l},\n",
            "  m => {\n    n,\n    o\n  }\n}">>, Fun2(#{a => {b,c}, d => {e,f}, g => {h,i}, j => {k,l}, m => {n,o}}, #{no_expansion => [[{d,j}]]})),
        ?_assertEqual(<<"#{\n",
            "  a => {\n    b,\n    c\n  },\n",
            "  d => {e, f},\n",
            "  g => {h, i},\n",
            "  j => {k, l},\n",
            "  m => {\n    n,\n    o\n  }\n}">>, Fun2(#{a => {b,c}, d => {e,f}, g => {h,i}, j => {k,l}, m => {n,o}}, #{no_expansion => [[[{d,j}]]]})),
        ?_assertEqual(<<"#{\n",
            "  a => {b, c},\n",
            "  d => {e, f},\n",
            "  g => {h, i},\n",
            "  j => {k, l},\n",
            "  m => {n, o}\n}">>,                Fun2(#{a => {b,c}, d => {e,f}, g => {h,i}, j => {k,l}, m => {n,o}}, #{no_expansion => [['*']]})),
        ?_assertEqual(<<"#{\n",
            "  a => {b, c},\n",
            "  d => {e, f},\n",
            "  g => {h, i},\n",
            "  j => {k, l},\n",
            "  m => {n, o}\n}">>,                Fun2(#{a => {b,c}, d => {e,f}, g => {h,i}, j => {k,l}, m => {n,o}}, #{no_expansion => [[['*']]]})),
        ?_assertEqual(<<"#{\n",
            "  a => {\n    b,\n    c\n  },\n",
            "  d => {e, f},\n",
            "  g => {\n    h,\n    i\n  },\n",
            "  j => {k, l},\n",
            "  m => {\n    n,\n    o\n  }\n}">>, Fun2(#{a => {b,c}, d => {e,f}, g => {h,i}, j => {k,l}, m => {n,o}}, #{no_expansion => [[[d, j]]]})),

        ?_assertEqual(<<
            "[\n",
            "  [\n",
            "    a,\n",
            "    b\n",
            "  ],\n",
            "  [[c, d], [e, f, g]],\n",
            "  i,\n",
            "  [\n",
            "    [j, [k, l], m],\n",
            "    [\n",
            "      n,\n",
            "      o\n",
            "    ],\n",
            "    [p, r, s],\n",
            "    [t, u]\n",
            "  ]\n",
            "]">>, Fun2([[a, b], [[c, d], [e, f, g]], i, [[j, [k, l], m], [n, o], [p, r, s], [t, u]]], #{no_expansion => [[2], [4, [1,{3,4}]]]})),
        ?_assertEqual(<<
            "{\n",
            "  {\n",
            "    a,\n",
            "    b\n",
            "  },\n",
            "  {{c, d}, {e, f, g}},\n",
            "  i,\n",
            "  {\n",
            "    {j, {k, l}, m},\n",
            "    {\n",
            "      n,\n",
            "      o\n",
            "    },\n",
            "    {p, r, s},\n",
            "    {t, u}\n",
            "  }\n",
            "}">>, Fun2({{a, b}, {{c, d}, {e, f, g}}, i, {{j, {k, l}, m}, {n, o}, {p, r, s}, {t, u}}}, #{no_expansion => [[2], [4, [1,{3,4}]]]})),
        ?_assertEqual(<<
            "#{\n",
            "  1.0 => #{\n",
            "    1.1 => a,\n",
            "    1.2 => b\n",
            "  },\n",
            "  2.0 => #{2.1 => {c, d}, 2.2 => {e, f, g}},\n",
            "  3.0 => i,\n",
            "  4.0 => #{\n",
            "    4.1 => #{4.11 => j, 4.12 => #{4.121 => k, 4.122 => l}, 4.13 => m},\n",
            "    4.2 => #{\n",
            "      4.21 => n,\n",
            "      4.22 => o\n",
            "    },\n",
            "    4.3 => #{4.31 => p, 4.32 => r, 4.33 => s},\n",
            "    4.4 => #{4.41 => t, 4.42 => u}\n",
            "  }\n",
            "}">>, Fun2(#{
                1.0 => #{1.1 => a, 1.2 => b},
                2.0 => #{2.1 => {c, d}, 2.2 => {e, f, g}},
                3.0 => i,
                4.0 => #{
                    4.1 => #{4.11 => j, 4.12 => #{4.121 => k, 4.122 => l}, 4.13 => m},
                    4.2 => #{4.21 => n, 4.22 => o},
                    4.3 => #{4.31 => p, 4.32 => r, 4.33 => s},
                    4.4 => #{4.41 => t, 4.42 => u}
                }
            }, #{no_expansion => [[2.0], [4.0, [4.1, {4.3, 4.4}]]]})),

        ?_assertEqual(<<"#{\n",
            "  {\n    a,\n    b\n  } => {\n    c,\n    d\n  },\n",
            "  {\n    e,\n    f\n  } => {\n    g,\n    h\n  }\n}">>, Fun2(#{{a, b} => {c,d}, {e,f} => {g, h}}, #{expand_map_keys => true})),
        ?_assertEqual(<<"#{\n",
            "  {a, b} => {\n    c,\n    d\n  },\n",
            "  {e, f} => {\n    g,\n    h\n  }\n}">>, Fun2(#{{a, b} => {c,d}, {e,f} => {g, h}}, #{expand_map_keys => false}))
    ].
